{"version":3,"sources":["context/Context.js","constants.js","api/auth.js","layout/Header.js","context/action.types.js","pages/PageNotFound.js","pages/Auth.js","pages/Home.js","api/folders.js","components/Folder.js","pages/Folders.js","components/Tweet.js","pages/OneFolder.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","isDev","Boolean","window","location","hostname","match","console","log","BB_URL","TWTAUTH_PREFIX","authenticate","email","password","twtId","register","a","URL","request","fetch","method","cache","headers","body","JSON","stringify","response","status","json","data","error","success","message","token","userId","login","logout","Header","useContext","state","dispatch","loggedIn","signout","toast","type","signoutResult","forEach","action","payload","Navbar","sticky","className","NavbarBrand","tag","Link","to","NavbarText","onClick","PageNotFound","Auth","useState","isSubmitting","setIsSubmitting","isLoading","setIsLoading","signIn","setSignIn","setEmail","setPassword","passwordConfirm","setPasswordConfirm","setTwtId","staySignedIn","setStaySignedIn","handleSubmit","event","preventDefault","useEffect","authResult","setCredentials","Spinner","color","Container","fluid","Row","Col","md","Form","onSubmit","FormGroup","name","id","placeholder","value","onChange","e","target","check","Label","Input","checked","style","fontWeight","letterSpacing","key","Button","block","padding","fontSize","Home","props","search","close","showTwtAuth","setShowTwtAuth","twtAuthUrl","setTwtAuthUrl","Card","CardTitle","CardBody","open","getFolders","folders","getOneFolder","folderId","getFoldersURL","tweets","Folder","folder","folderKey","history","useHistory","folderName","push","zIndex","marginRight","Folders","gotFolders","setGotFolders","foldersArr","setFoldersArr","length","ListGroup","map","ListGroupItem","Tweet","tweet","tweetKey","embed","twtText","OneFolder","getTweets","setGetTweets","tweetsArr","setTweetsArr","size","scrollable","prevUser","showLogout","user","initialState","inAuth","twtAuth","authed","twtToken","twtSecret","folerName","folderToUpdate","folderIdToUpdate","App","useReducer","reducer","basename","Provider","theme","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f04a5518.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const AppContext = createContext();","\nconst isDev = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\twindow.location.hostname === '[::1]' ||\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n)\n\nconsole.log(`isDev: ${isDev}`)\n\nexport const BB_URL = isDev\n\t? 'http://127.0.0.1:4000'\n\t: 'https://betterbookmarks.herokuapp.com'\n\n\nexport const TWTAUTH_PREFIX =\n\t'https://twitter.com/i/oauth2/authorize?response_type=code&client_id=YnEzOGs2Y2pLMWRUTXM2X3dYU1g6MTpjaQ&redirect_uri=' +\n\tBB_URL + '/twtauth?user='\n\nexport const TWTAUTH_SUFFIX =\n\t'&scope=tweet.read%20like.read&state=state&code_challenge=InSomnia&code_challenge_method=plain'","import { BB_URL } from \"../constants\"\n\nexport const authenticate = async (email, password, twtId, register) => {\n    const URL = BB_URL + '/auth' + (register ? '/signup' : '/login')\n    console.log(`authenticating with url: `)\n    console.log(URL)\n    const request = {\n        email: email,\n        password: password,\n        twtId: twtId || null\n    }\n    try {\n        const response = await fetch(URL, {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(request)\n        })\n        const status = response.status\n        const data = await response.json()\n        if (!register) {\n            return {\n                error: status === 200 ? null : data,\n                success: status === 200 ? data.message : null,\n                token: data.token || null,\n                userId: data.userId || null\n            }\n        } else {\n            if (status === 200) {\n                const login = await authenticate(email, password, null, false)\n                if (login.success) {\n                    return {\n                        error: null,\n                        success: `Account created & logged in!`,\n                        token: login.token\n                    }\n                } else {\n                    return { error: `User ${email} created but login failed.` }\n                }\n            } else {\n                return { error: data }\n            }\n        }\n    } catch(error) {\n        console.error(error)\n        return {\n            error: \"Unknown error\"\n        }\n    }\n}\n\nexport const logout = async (token) => {\n    const URL = BB_URL + '/user/signout'\n    try {\n        const response = await fetch(URL, {\n            method: 'Get',\n            cache: 'no-cache',\n            headers: {\n                'Authorization': `JWT ${token}`\n            }\n        })\n        const status = response.status\n        console.log(`in logout, response:`)\n        const data = await response.json()\n        console.log(data)\n        if (status === 200) {\n            return {\n                error: null,\n                success: data.message,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n    } catch(error) {\n        return { error: \"Unknown error logging out.\" }\n    }\n} ","//TODO: DONE set NavbarBrand to go to home page and export Header\n\nimport React, { useContext } from 'react'\nimport { Navbar, NavbarBrand, NavbarText, Button } from 'reactstrap'\nimport { NavLink } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport Nav from 'reactstrap/lib/Nav'\nimport { AppContext } from '../context/Context'\n\nimport {\n\tSET_USER,\n\tSET_LOGIN,\n\tSET_TOKEN,\n\tSET_FOLDERS,\n\tSET_USER_ID,\n} from '../context/action.types'\n\n\nimport { toast } from 'react-toastify'\n\nimport { logout } from '../api/auth'\n\nconst Header = () => {\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst { loggedIn, token } = state\n\n\tconst signout = async () => {\n\t\tif (!token) {\n\t\t\ttoast('No user to logout!', { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tconst signoutResult = await logout(token)\n\t\tif (signoutResult.error) {\n\t\t\ttoast(signoutResult.error, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\ttoast(signoutResult.success, { type: 'success' })\n\t\tconst actions = [SET_USER, SET_LOGIN, SET_TOKEN, SET_FOLDERS, SET_USER_ID]\n\t\tactions.forEach((action) => dispatch({ type: action, payload: null }))\n\t}\n\n\treturn (\n\t\t<Navbar sticky='top' className='nav'>\n\t\t\t<NavbarBrand tag={Link} to='/' className='text-white navbrand'>\n\t\t\t\tBetter Bookmarks\n\t\t\t</NavbarBrand>\n\t\t\t<NavLink to='/folders' className='text-white'>\n\t\t\t\tFolders\n\t\t\t</NavLink>\n\t\t\t<NavLink to='/likes' className='text-white'>\n\t\t\t\tLikes\n\t\t\t</NavLink>\n\t\t\t<NavLink to='/import' className='text-white'>\n\t\t\t\tImport\n\t\t\t</NavLink>\n\t\t\t<NavbarText className='text-white float-right navtxt'>\n\t\t\t\t{loggedIn ? (\n\t\t\t\t\t<span onClick={signout} className='text-white text-large link'>\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<NavLink className='text-white text-large' to='/auth'>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</NavLink>\n\t\t\t\t)}\n\t\t\t</NavbarText>\n\t\t</Navbar>\n\t)\n}\n\nexport default Header\n","export const SET_USER = \"SET_USER\"\nexport const SET_USER_ID = 'SET_USER_ID'\nexport const SET_FOLDERS = \"SET_FOLDERS\"\nexport const SET_LOGIN = \"SET_LOGIN\"\nexport const SET_TOKEN = \"SET_TOKEN\"\nexport const RESET_SIGNIN = 'RESET_SIGNIN'\nexport const SET_SHOW_LOGOUT = 'SET_SHOW_LOGOUT'\nexport const SET_PREV_USER = 'SET_PREV_USER'\nexport const SET_SINGLE_FOLDER = 'SET_SINGLE_FOLDER'\nexport const SET_SINGLE_FOLDER_NAME = 'SET_SINGLE_FOLDER_NAME'","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst PageNotFound = () => {\n  return (\n    <Redirect to='/'></Redirect>\n  );\n};\n\n//FIXME: missing keywords\nexport default PageNotFound;\n","import React, { useState, useContext, useEffect } from 'react'\n\nimport {\n\tContainer,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tButton,\n\tSpinner,\n\tRow,\n\tCol,\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport {\n\tSET_USER,\n\tSET_TOKEN,\n\tSET_LOGIN,\n\tSET_USER_ID,\n} from '../context/action.types'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { authenticate } from '../api/auth'\n\nconst Auth = () => {\n\t// Get context and destructure loggedIn from state\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst { loggedIn } = state\n\n\t// State for handling loading & triggering API calls\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\tconst [isLoading, setIsLoading] = useState(false)\n\n\t// State variable representing input fields\n\tconst [signIn, setSignIn] = useState(true)\n\tconst [email, setEmail] = useState(\"\")\n\tconst [password, setPassword] = useState(\"\")\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\")\n\tconst [twtId, setTwtId] = useState(\"\")\n\tconst [staySignedIn, setStaySignedIn] = useState(false)\n\n\t// Toggle betweein sign-in and register forms\n\tconst toggleAuth = () => {\n\t\tsetSignIn(!signIn)\n\t}\n\n\t// Handle form submission & validate input\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\tif (email === '' || password === '' || (!signIn && passwordConfirm === '')) {\n\t\t\ttoast(`Please complete all required fields.`, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tif (!signIn && password !== passwordConfirm) {\n\t\t\ttoast(`Passwords do not match!`, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tsetIsLoading(true)\n\t\tsetIsSubmitting(true)\n\t}\n\n\t// If the form event handler validates input, call the auth API\n\tuseEffect(() => {\n\t\tif (!isSubmitting) {\n\t\t\tsetIsLoading(false)\n\t\t\treturn\n\t\t}\n\t\t(async () => {\n\t\t\tconst authResult = await authenticate(\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t\ttwtId,\n\t\t\t\t!signIn\n\t\t\t)\n\t\t\tif (authResult.error) {\n\t\t\t\ttoast(authResult.error, { type: 'error' })\n\t\t\t} else {\n\t\t\t\ttoast(authResult.success, { type: 'success' })\n\t\t\t\tconsole.log(`authResult:`)\n\t\t\t\tconsole.log(authResult)\n\t\t\t\tsetCredentials(email, authResult.token, authResult.userId)\n\t\t\t}\n\t\t\tsetIsLoading(false)\n\t\t\tsetIsSubmitting(false)\n\t\t})()\n\t}, [isSubmitting])\n\n\t// Set credential variables in parent state\n\tconst setCredentials = (email, token, userId) => {\n\t\tconsole.log(`setting credentials: `)\n\t\tconsole.log(email, token, userId)\n\t\tdispatch({\n\t\t\ttype: SET_USER,\n\t\t\tpayload: email,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_TOKEN,\n\t\t\tpayload: token,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_LOGIN,\n\t\t\tpayload: true,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_USER_ID,\n\t\t\tpayload: userId\n\t\t})\n\t}\n\n\t// Render spinner while waiting for API\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<div className='Center'>\n\t\t\t\t<Spinner color='primary' />\n\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// If logged in, redirect to /folders, else, render auth forms\n\tif (loggedIn) {\n\t\treturn <Redirect to='/folders'></Redirect>\n\t} else {\n\t\treturn (\n\t\t\t<Container fluid className='mt-5 '>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md='8' className='offset-md-2 p-3 '>\n\t\t\t\t\t\t<Form className='formcard auth-form' onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<FormGroup\n\t\t\t\t\t\t\t\tclassName='mt-4'>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='input'\n\t\t\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\t\t\tname='email'\n\t\t\t\t\t\t\t\t\tid='email'\n\t\t\t\t\t\t\t\t\tplaceholder='Email'\n\t\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\tid='password'\n\t\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{signIn ? (\n\t\t\t\t\t\t\t\t<FormGroup check className='mt-2'>\n\t\t\t\t\t\t\t\t\t<Label check>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tclassName='checkmark'\n\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetStaySignedIn(!staySignedIn)\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tchecked={staySignedIn}\n\t\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tclassName='text-right'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#f9f9f9',\n\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: '400',\n\t\t\t\t\t\t\t\t\t\t\t\tletterSpacing: '1px',\n\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\tStay signed in\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t<FormGroup key='password-confirm'>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\tname='password-confirm'\n\t\t\t\t\t\t\t\t\t\t\tid='password-confirm'\n\t\t\t\t\t\t\t\t\t\t\tvalue={passwordConfirm}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setPasswordConfirm(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Confirm password'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormGroup>,\n\t\t\t\t\t\t\t\t\t<FormGroup key='twtId'>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\t\t\tname='twtId'\n\t\t\t\t\t\t\t\t\t\t\tid='twtId'\n\t\t\t\t\t\t\t\t\t\t\tvalue={twtId}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTwtId(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Twitter Username'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormGroup>,\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\tclassName='text-uppercase button mt-5'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t{signIn ? 'Sign in' : 'Register'}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md='8' className='offset-md-8'>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={toggleAuth}\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='text-uppercase button-static'\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{signIn ? 'Register' : 'Sign in'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default Auth","import React, { useState, useContext, useEffect } from 'react'\n\nimport {\n\tContainer,\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    CardText,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tButton,\n\tSpinner,\n\tRow,\n\tCol,\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport { TWTAUTH_PREFIX, TWTAUTH_SUFFIX } from '../constants'\n\nconst Home = (props) => {\n\n\tconst location = props.location\n\tconsole.log(`in home, location.search: ${location.search}`)\n\tif (location.search === '?close') {\n\t\tconsole.log('closing window')\n\t\twindow.close()\n\t}\n\n    const { state, dispatch } = useContext(AppContext)\n    const { loggedIn, userId } = state\n\n\tconst [showTwtAuth, setShowTwtAuth] = useState(false)\n\tconst [twtAuthUrl, setTwtAuthUrl] = useState(\"\")\n\n\tconst twtPopup = () => {\n\t\twindow.open(twtAuthUrl)\n\t}\n\n\tuseEffect(() => {\n\t\tif (loggedIn && userId) {\n\t\t\tsetTwtAuthUrl(TWTAUTH_PREFIX + userId + TWTAUTH_SUFFIX)\n\t\t\tsetShowTwtAuth(true)\n\t\t}\n\t},[loggedIn])\n\n    return (\n\t\t\t<div className='center-home'>\n\t\t\t\t<Card className='homecard card-fab'>\n\t\t\t\t\t<CardTitle>Welcome to Better Bookmarks</CardTitle>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>Organize your favorite Tweets into folders</li>\n\t\t\t\t\t\t\t\t<li>Share folders with anyone</li>\n\t\t\t\t\t\t\t\t<li>No more \"This Tweet has been deleted\"</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t{showTwtAuth ? <span className='link' onClick={twtPopup}>Login with Twitter</span> : null}\n\t\t\t\t\t</CardBody>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t)\n}\n\nexport default Home","const URL = 'https://betterbookmarks.herokuapp.com'\n\n// 403 is old token\n\nexport const getFolders = async (token) => {\n\tconst getFoldersURL = URL + '/user/folders'\n\ttry {\n\t\tconst response = await fetch(getFoldersURL, {\n\t\t\tmethod: 'GET',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n                'Authorization': `JWT ${token}`\n\t\t\t},\n\t\t})\n        const status = response.status\n        const data = await response.json()\n        if (status === 200) {\n            return {\n                error: null,\n                folders: data.folders,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n\t} catch (error) {\n\t\tconsole.error(error)\n        return null\n\t}\n}\n\nexport const getOneFolder = async (folderId, token) => {\n    const getFoldersURL = URL + '/user/folders/' + folderId\n    console.log('getonefolder URL:')\n    console.log(getFoldersURL)\n\ttry {\n\t\tconst response = await fetch(getFoldersURL, {\n\t\t\tmethod: 'GET',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n                'Authorization': `JWT ${token}`\n\t\t\t},\n\t\t})\n        const status = response.status\n        console.log(`getting one folder status: ${status}`)\n        const data = await response.json()\n        if (status === 200) {\n            return {\n                error: null,\n                tweets: data.tweets,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n\t} catch (error) {\n\t\tconsole.error(error)\n        return null\n\t}\n}","import React, { useContext } from 'react'\nimport { Row, Col } from 'reactstrap'\n\nimport { MdDelete, MdEdit } from 'react-icons/md'\n\nimport { useHistory  } from 'react-router-dom'\n\nimport { SET_SINGLE_FOLDER, SET_SINGLE_FOLDER_NAME } from '../context/action.types'\n\nimport { AppContext } from '../context/Context'\n\nconst Folder = ({folder, folderKey}) => {\n    const { state, dispatch } = useContext(AppContext)\n    const history = useHistory()\n\n    const updateFolder = () => {\n        // Modal?\n        return\n    }\n\n    const deleteFolder = () => {\n        // Modal?\n        return\n    }\n\n    const viewFolder = (folderId) => {\n\t\tconsole.log(`clicked folder ${folderId}`)\n        dispatch({\n\t\t\t\t\ttype: SET_SINGLE_FOLDER,\n\t\t\t\t\tpayload: folderId,\n\t\t\t\t})\n\t\tdispatch({\n\t\t\t\ttype: SET_SINGLE_FOLDER_NAME,\n\t\t\t\tpayload: folder.folderName,\n\t\t})\n        history.push('/onefolder')\n    }\n\n    return (\n\t\t\t<Row>\n\t\t\t\t<Col\n\t\t\t\t\tonClick={() => viewFolder(folderKey)}\n\t\t\t\t\tmd='10'\n\t\t\t\t\tclassName='d-flex justify-content-center align-items-center text-large cardtxt'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t}}>\n\t\t\t\t\t<div className='name'>{folder.folderName}</div>\n\t\t\t\t</Col>\n\t\t\t\t<Col\n\t\t\t\t\tmd='2'\n\t\t\t\t\tclassName='d-flex justify-content-center align-items-center'>\n\t\t\t\t\t<div className='iconbtn mr-4 '>\n\t\t\t\t\t\t<MdDelete\n\t\t\t\t\t\t\tonClick={() => deleteFolder()}\n\t\t\t\t\t\t\tcolor='#FF6370'\n\t\t\t\t\t\t\tclassName=' icon'\n\t\t\t\t\t\t\tstyle={{ zIndex: '1' }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='iconbtn mr-5' style={{ marginRight: '30px' }}>\n\t\t\t\t\t\t<MdEdit\n\t\t\t\t\t\t\tclassName='icon '\n\t\t\t\t\t\t\tcolor='#54eafe'\n\t\t\t\t\t\t\tonClick={() => updateFolder()}\n\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t)\n}\n\nexport default Folder","import React, { useContext, useEffect, useState } from 'react'\n\nimport {\n\tContainer,\n\tListGroup,\n\tListGroupItem,\n\tSpinner,\n\tButton,\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { getFolders } from '../api/folders'\n\nimport Folder from '../components/Folder'\n\n// import {  } from '../context/action.types'\n\nconst Folders = () => {\n    const { state, dispatch } = useContext(AppContext)\n\n\tconst { loggedIn, token } = state\n\n    const [ isLoading, setIsLoading ] = useState(true)\n    const [ gotFolders, setGotFolders ] = useState(false)\n    const [ foldersArr, setFoldersArr ] = useState([])\n\n    useEffect(() => {\n        if (gotFolders) {\n            return\n        }\n        if (loggedIn) {\n            (async () => {\n                const folders = await getFolders(token)\n                if (folders.error) {\n                    toast(`Error: ${folders.error}`)\n                    setGotFolders(true)\n                    setIsLoading(false)\n                    return\n                }\n                if (folders.folders) {\n                    console.log('got folders: ')\n                    console.log(folders.folders)\n                    setFoldersArr(folders.folders)\n                    setGotFolders(true)\n\t\t\t\t\tsetIsLoading(false)\n                }\n            })()\n        }\n    }, [gotFolders])\n\n    if (!loggedIn) {\n        return (\n            <Redirect to='/auth'></Redirect>\n        )\n    } else if (isLoading) {\n        return (\n\t\t\t<div className='Center'>\n\t\t\t\t<Spinner color='primary' />\n\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t</div>\n\t\t)\n    } else {\n        console.log('rendering folders: ')\n        console.log(foldersArr)\n        return (\n\t\t\t\t\t<Container className='mt-4 mb-5 folder-list'>\n\t\t\t\t\t\t{foldersArr.length === 0 && !isLoading ? (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName='Center text-large cardtxt'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\tNo folders found!\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t{foldersArr.map(folder => (\n\t\t\t\t\t\t\t\t\t<ListGroupItem key={folder.folderId} className='listcard mt-4'>\n\t\t\t\t\t\t\t\t\t\t<Folder folder={folder} folderKey={folder.folderId} />\n\t\t\t\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Container>\n\t\t\t\t)\n    }\n}\n\nexport default Folders","import React, { useContext, useEffect, useState } from 'react'\nimport { Row, Col } from 'reactstrap'\n\nimport { MdDelete, MdEdit } from 'react-icons/md'\n\nimport { useHistory } from 'react-router-dom'\n\nimport { AppContext } from '../context/Context'\n\nconst Tweet = ({tweet, tweetKey, embed}) => {\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst history = useHistory()\n\n\tconst deleteTweet = () => {\n\t\t// Modal?\n\t\treturn\n\t}\n\n\treturn (\n\t\t<Row>\n\t\t\t<Col\n\t\t\t\tmd='10'\n\t\t\t\tclassName='d-flex justify-content-center align-items-center text-large cardtxt'\n\t\t\t\tstyle={{\n\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t}}>\n\t\t\t\t<div className='tweet'>{tweet.twtText}</div>\n\t\t\t</Col>\n\t\t\t<Col md='2' className='d-flex justify-content-center align-items-center'>\n\t\t\t\t<div className='iconbtn'>\n\t\t\t\t\t<MdDelete\n\t\t\t\t\t\tonClick={() => deleteTweet()}\n\t\t\t\t\t\tcolor='#FF6370'\n\t\t\t\t\t\tclassName=' icon'\n\t\t\t\t\t\tstyle={{ zIndex: '1' }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Col>\n\t\t</Row>\n\t)\n}\n\nexport default Tweet\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport { useHistory } from 'react-router-dom'\n\nimport { IoIosArrowBack } from 'react-icons/io'\n\nimport {\n\tContainer,\n\tListGroup,\n\tListGroupItem,\n\tSpinner,\n\tButton,\n    Row,\n    Col\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { getOneFolder } from '../api/folders'\n\nimport Tweet from '../components/Tweet'\n\nconst OneFolder = () => {\n    const { state, dispatch } = useContext(AppContext)\n    const history = useHistory()\n    const { folder, folderName, loggedIn, token } = state\n\n    const [ isLoading, setIsLoading ] = useState(true)\n    const [ getTweets, setGetTweets ] = useState(true)\n    const [ tweetsArr, setTweetsArr ] = useState([])\n\n    const [ embed, setEmbed ] = useState(true)\n\n    useEffect(() => {\n        if (!getTweets) {\n            return\n        }\n        if (!folder) {\n            return\n        }\n        if (loggedIn) {\n            (async () => {\n                const tweets = await getOneFolder(folder, token)\n                if (tweets.error) {\n                    toast(`Error: ${tweets.error}`)\n                    setGetTweets(false)\n                    setIsLoading(false)\n                    return\n                }\n                if (tweets.tweets) {\n                    console.log('got tweets: ')\n                    console.log(tweets.tweets)\n                    setTweetsArr(tweets.tweets)\n                    setGetTweets(false)\n\t\t\t\t\tsetIsLoading(false)\n                }\n            })()\n        }\n    })\n\n    const back = () => {\n        history.push('/folders')\n    }\n\n    if (!loggedIn) {\n        return (\n            <Redirect to='/auth'></Redirect>\n        )\n    } else if (isLoading) {\n        return (\n\t\t\t<div className='Center'>\n\t\t\t\t<Spinner color='primary' />\n\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t</div>\n\t\t)\n    } else {\n        console.log('rendering tweets: ')\n        console.log(tweetsArr)\n        return (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<Container className='tweetcard'>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col md='2'>\n\t\t\t\t\t\t\t\t\t<div className='icon' onClick={() => back()}>\n\t\t\t\t\t\t\t\t\t\t<IoIosArrowBack size={22} className=' text-white' />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md='8'>\n\t\t\t\t\t\t\t\t\t<div className='folderName'>{folderName}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md='2'></Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Container scrollable={true} className='mt-4 mb-5 tweet-list'>\n\t\t\t\t\t\t\t{tweetsArr.length === 0 && !isLoading ? (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName='Center text-large cardtxt'\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tNo Tweets (yet)!\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t{tweetsArr.map((tweet) => (\n\t\t\t\t\t\t\t\t\t\t<ListGroupItem key={tweet.twtId} className='tweetcard mb-4'>\n\t\t\t\t\t\t\t\t\t\t\t<Tweet embed={embed} tweet={tweet} tweetKey={tweet.twtId} />\n\t\t\t\t\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</>\n\t\t\t\t)\n        }\n}\n\nexport default OneFolder","import {\n\tSET_USER,\n\tSET_TOKEN,\n\tSET_LOGIN,\n\tSET_FOLDERS,\n\tRESET_SIGNIN,\n\tSET_SHOW_LOGOUT,\n\tSET_PREV_USER,\n\tSET_SINGLE_FOLDER,\n\tSET_SINGLE_FOLDER_NAME,\n  SET_USER_ID\n} from './action.types'\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_USER_ID:\n      return action.payload === null\n        ? { ...state, userId: null}\n        : { ...state, userId: action.payload}\n    case SET_SINGLE_FOLDER_NAME:\n      return { ...state, folderName: action.payload}\n    case SET_SINGLE_FOLDER:\n      return { ...state, folder: action.payload}\n    case SET_PREV_USER:\n      return action.payload === null\n        ? { ...state, prevUser: null}\n        : { ...state, prevUser: action.payload}\n    case SET_SHOW_LOGOUT:\n      return { ...state, showLogout: action.payload }\n    case RESET_SIGNIN:\n      return { ...state, signIn: true}\n    case SET_FOLDERS:\n      return action.payload === null\n        ? { ...state, folders: []}\n        : { ...state, folders: action.payload}\n    case SET_LOGIN:\n      return action.payload === null\n        ? { ...state, loggedIn: false}\n        : { ...state, loggedIn: action.payload}\n    case SET_USER:\n      return action.payload === null\n        ? { ...state, user: null}\n        : { ...state, user: action.payload}\n    case SET_TOKEN:\n      return action.payload === null || action.payload === false\n        ? { ...state, token: null}\n        : { ...state, token: action.payload}\n    default:\n      return state\n  }\n}","import React, { useReducer } from \"react\";\n\nimport { Container } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// components\nimport Header from \"./layout/Header\"\nimport Footer from \"./layout/Footer\"\nimport PageNotFound from \"./pages/PageNotFound\"\nimport Auth from \"./pages/Auth\"\nimport Home from \"./pages/Home\"\nimport Folders from \"./pages/Folders\"\nimport OneFolder from './pages/OneFolder'\n\nimport reducer from \"./context/reducer\";\nimport { AppContext } from \"./context/Context\";\n\nconst initialState = {\n  showLogout: false,\n  inAuth: false,\n  loggedIn: false,\n  twtAuth: {\n    authed: false,\n    twtId: null,\n    twtToken: null,\n    twtSecret: null\n  },\n  user: null,\n  userId: null,\n  prevUser: null,\n  token: null,\n  folders: [],\n  folder: {},\n  folerName: null,\n  folderToUpdate: null,\n  folderIdToUpdate: null\n};\n\nconst App = () => {\n  \n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n\t\t<Router basename='better-bookmarks'>\n\t\t\t<AppContext.Provider value={{ state, dispatch }}>\n\t\t\t\t<ToastContainer theme='dark' />\n\t\t\t\t<Header />\n\t\t\t\t<Container className='h-75'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/auth' component={Auth} />\n\t\t\t\t\t\t<Route exact path='/folders' component={Folders} />\n\t\t\t\t\t\t<Route exact path='/onefolder' component={OneFolder} />\n\t\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t\t<Route exact path='*' component={PageNotFound} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Container>\n\t\t\t\t{/* <Footer /> */}\n\t\t\t</AppContext.Provider>\n\t\t</Router>\n\t)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}