{"version":3,"sources":["context/Context.js","constants.js","api/auth.js","layout/Header.js","context/action.types.js","pages/PageNotFound.js","pages/Auth.js","newtwturl.js","pages/Home.js","api/folders.js","components/Folder.js","components/Tweet.js","pages/OneFolder.js","pages/Folders.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","BB_URL","Boolean","window","location","hostname","match","TWTAUTH_PREFIX","authenticate","email","password","twtId","register","a","URL","console","log","request","fetch","method","cache","headers","body","JSON","stringify","response","status","json","data","error","success","message","token","userId","twtChallenge","login","logout","Header","useContext","state","dispatch","loggedIn","signout","toast","type","signoutResult","forEach","action","payload","Navbar","sticky","className","NavbarBrand","tag","Link","to","NavbarText","onClick","PageNotFound","Auth","useState","isSubmitting","setIsSubmitting","isLoading","setIsLoading","signIn","setSignIn","setEmail","setPassword","passwordConfirm","setPasswordConfirm","setTwtId","staySignedIn","setStaySignedIn","handleSubmit","event","preventDefault","useEffect","authResult","setCredentials","Spinner","color","Container","fluid","Row","Col","md","Form","onSubmit","FormGroup","name","id","placeholder","value","onChange","e","target","check","Label","Input","checked","style","fontWeight","letterSpacing","key","Button","block","padding","fontSize","getTwtUrl","user","challenge","Home","props","search","close","twtState","showTwtAuth","setShowTwtAuth","twtAuthUrl","setTwtAuthUrl","Card","CardTitle","CardBody","open","getFolders","getFoldersURL","folders","getOneFolder","folderId","tweets","newFolder","folderName","newFolderURL","reqData","Authorization","folder","deleteFolder","deleteFolderURL","changeFolderName","newName","changeNameURL","Folder","refresh","selectFolder","selected","editable","setEditable","setFolderName","callingAPI","setCallingAPI","creatingFolder","setCreatingFolder","editingFolder","setEditingFolder","showDelete","setShowDelete","deletingFolder","setDeletingFolder","editName","handleNewFolder","createFolder","result","nameForm","onBlur","autoFocus","deleteModal","Modal","show","backdrop","keyboard","ModalHeader","ModalTitle","CloseButton","ModalBody","ModalFooter","variant","width","overflow","textOverflow","whiteSpace","xs","length","substring","hidden","zIndex","Tweet","tweet","useHistory","enteredView","setEnteredView","tweetRef","useRef","useInViewport","disconnectOnLeave","inViewport","enterCount","ref","onLoad","tweetId","twtText","OneFolder","setPrevFolder","setGetTweets","tweetsArr","setTweetsArr","tweetRows","setTweetRows","colA","colB","i","push","ListGroupItem","embed","tweetKey","rows","scrollable","ListGroup","Folders","gotFolders","setGotFolders","foldersArr","setFoldersArr","currentFolder","setCurrentFolder","prevFolder","oneFolder","setOneFolder","refreshFolders","find","map","prevUser","showLogout","initialState","inAuth","twtAuth","authed","twtToken","twtSecret","randomBytes","toString","folerName","folderToUpdate","folderIdToUpdate","App","useReducer","reducer","basename","Provider","theme","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.48abd1bd.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const AppContext = createContext();","\nconst isDev = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\twindow.location.hostname === '[::1]' ||\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n)\n\nexport const BB_URL = isDev\n\t? 'http://127.0.0.1:4000'\n\t: 'https://betterbookmarks.herokuapp.com'\n\n\nexport const TWTAUTH_PREFIX =\n\t'https://twitter.com/i/oauth2/authorize?response_type=code&client_id=YnEzOGs2Y2pLMWRUTXM2X3dYU1g6MTpjaQ&redirect_uri=' +\n\tBB_URL + '/twtauth?user='\n\nexport const TWTAUTH_STATE = '&scope=tweet.read%20like.read&state='\n\nexport const TWTAUTH_CHALLENGE = '&code_challenge='\n\nexport const TWTAUTH_SUFFIX = '&code_challenge_method=plain'","import { BB_URL } from \"../constants\"\n\nexport const authenticate = async (email, password, twtId, register) => {\n    const URL = BB_URL + '/auth' + (register ? '/signup' : '/login')\n    console.log(`authenticating with url: `)\n    console.log(URL)\n    const request = {\n        email: email,\n        password: password,\n        twtId: twtId || null\n    }\n    try {\n        const response = await fetch(URL, {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(request)\n        })\n        const status = response.status\n        const data = await response.json()\n        if (!register) {\n            return {\n                error: status === 200 ? null : data,\n                success: status === 200 ? data.message : null,\n                token: data.token || null,\n                userId: data.userId || null,\n                twtChallenge: data.twtChallenge || null\n            }\n        } else {\n            if (status === 200) {\n                const login = await authenticate(email, password, null, false)\n                if (login.success) {\n                    return {\n                        error: null,\n                        success: `Account created & logged in!`,\n                        token: login.token,\n                        userId: login.userId,\n                        twtChallenge: login.twtChallenge\n                    }\n                } else {\n                    return { error: `User ${email} created but login failed.` }\n                }\n            } else {\n                return { error: data }\n            }\n        }\n    } catch(error) {\n        console.error(error)\n        return {\n            error: \"Unknown error\"\n        }\n    }\n}\n\nexport const logout = async (token) => {\n    const URL = BB_URL + '/user/signout'\n    try {\n        const response = await fetch(URL, {\n            method: 'Get',\n            cache: 'no-cache',\n            headers: {\n                'Authorization': `JWT ${token}`\n            }\n        })\n        const status = response.status\n        const data = await response.json()\n        if (status === 200) {\n            return {\n                error: null,\n                success: data.message,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n    } catch(error) {\n        return { error: \"Unknown error logging out.\" }\n    }\n} ","//TODO: DONE set NavbarBrand to go to home page and export Header\n\nimport React, { useContext } from 'react'\nimport { Navbar, NavbarBrand, NavbarText, Button } from 'reactstrap'\nimport { NavLink } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport Nav from 'reactstrap/lib/Nav'\nimport { AppContext } from '../context/Context'\n\nimport {\n\tSET_USER,\n\tSET_LOGIN,\n\tSET_TOKEN,\n\tSET_FOLDERS,\n\tSET_USER_ID,\n} from '../context/action.types'\n\n\nimport { toast } from 'react-toastify'\n\nimport { logout } from '../api/auth'\n\nconst Header = () => {\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst { loggedIn, token } = state\n\n\tconst signout = async () => {\n\t\tif (!token) {\n\t\t\ttoast('No user to logout!', { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tconst signoutResult = await logout(token)\n\t\tif (signoutResult.error) {\n\t\t\ttoast(signoutResult.error, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\ttoast(signoutResult.success, { type: 'success' })\n\t\tconst actions = [SET_USER, SET_LOGIN, SET_TOKEN, SET_FOLDERS, SET_USER_ID]\n\t\tactions.forEach((action) => dispatch({ type: action, payload: null }))\n\t}\n\n\treturn (\n\t\t<Navbar sticky='top' className='nav'>\n\t\t\t<NavbarBrand tag={Link} to='/' className='text-white navbrand'>\n\t\t\t\tBetter Bookmarks\n\t\t\t</NavbarBrand>\n\t\t\t<NavLink to='/folders' className='text-white'>\n\t\t\t\tFolders\n\t\t\t</NavLink>\n\t\t\t<NavLink to='/likes' className='text-white'>\n\t\t\t\tLikes\n\t\t\t</NavLink>\n\t\t\t<NavLink to='/import' className='text-white'>\n\t\t\t\tImport\n\t\t\t</NavLink>\n\t\t\t<NavbarText className='text-white float-right navtxt'>\n\t\t\t\t{loggedIn ? (\n\t\t\t\t\t<span onClick={signout} className='text-white text-large link'>\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t<NavLink className='text-white text-large' to='/auth'>\n\t\t\t\t\t\tLogin\n\t\t\t\t\t</NavLink>\n\t\t\t\t)}\n\t\t\t</NavbarText>\n\t\t</Navbar>\n\t)\n}\n\nexport default Header\n","export const SET_USER = \"SET_USER\"\nexport const SET_USER_ID = 'SET_USER_ID'\nexport const SET_TWT_CHALLENGE = 'SET_TWT_CHALLENGE'\nexport const SET_FOLDERS = \"SET_FOLDERS\"\nexport const SET_LOGIN = \"SET_LOGIN\"\nexport const SET_TOKEN = \"SET_TOKEN\"\nexport const RESET_SIGNIN = 'RESET_SIGNIN'\nexport const SET_SHOW_LOGOUT = 'SET_SHOW_LOGOUT'\nexport const SET_PREV_USER = 'SET_PREV_USER'\nexport const SET_SINGLE_FOLDER = 'SET_SINGLE_FOLDER'\nexport const SET_SINGLE_FOLDER_NAME = 'SET_SINGLE_FOLDER_NAME'","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst PageNotFound = () => {\n  return (\n    <Redirect to='/'></Redirect>\n  );\n};\n\n//FIXME: missing keywords\nexport default PageNotFound;\n","import React, { useState, useContext, useEffect } from 'react'\n\nimport {\n\tContainer,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tButton,\n\tSpinner,\n\tRow,\n\tCol,\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport {\n\tSET_USER,\n\tSET_TOKEN,\n\tSET_LOGIN,\n\tSET_USER_ID,\n\tSET_TWT_CHALLENGE,\n} from '../context/action.types'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { authenticate } from '../api/auth'\n\nconst Auth = () => {\n\t// Get context and destructure loggedIn from state\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst { loggedIn } = state\n\n\t// State for handling loading & triggering API calls\n\tconst [isSubmitting, setIsSubmitting] = useState(false)\n\tconst [isLoading, setIsLoading] = useState(false)\n\n\t// State variable representing input fields\n\tconst [signIn, setSignIn] = useState(true)\n\tconst [email, setEmail] = useState(\"\")\n\tconst [password, setPassword] = useState(\"\")\n\tconst [passwordConfirm, setPasswordConfirm] = useState(\"\")\n\tconst [twtId, setTwtId] = useState(\"\")\n\tconst [staySignedIn, setStaySignedIn] = useState(false)\n\n\t// Toggle betweein sign-in and register forms\n\tconst toggleAuth = () => {\n\t\tsetSignIn(!signIn)\n\t}\n\n\t// Handle form submission & validate input\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\tif (email === '' || password === '' || (!signIn && passwordConfirm === '')) {\n\t\t\ttoast(`Please complete all required fields.`, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tif (!signIn && password !== passwordConfirm) {\n\t\t\ttoast(`Passwords do not match!`, { type: 'error' })\n\t\t\treturn\n\t\t}\n\t\tsetIsLoading(true)\n\t\tsetIsSubmitting(true)\n\t}\n\n\t// If the form event handler validates input, call the auth API\n\tuseEffect(() => {\n\t\tif (!isSubmitting) {\n\t\t\tsetIsLoading(false)\n\t\t\treturn\n\t\t}\n\t\t(async () => {\n\t\t\tconst authResult = await authenticate(\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t\ttwtId,\n\t\t\t\t!signIn\n\t\t\t)\n\t\t\tif (authResult.error) {\n\t\t\t\ttoast(authResult.error, { type: 'error' })\n\t\t\t} else {\n\t\t\t\ttoast(authResult.success, { type: 'success' })\n\t\t\t\tsetCredentials(email, authResult)\n\t\t\t}\n\t\t\tsetIsLoading(false)\n\t\t\tsetIsSubmitting(false)\n\t\t})()\n\t}, [isSubmitting])\n\n\t// Set credential variables in parent state\n\tconst setCredentials = (email, authResult) => {\n\t\tdispatch({\n\t\t\ttype: SET_USER,\n\t\t\tpayload: email,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_TOKEN,\n\t\t\tpayload: authResult.token,\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_USER_ID,\n\t\t\tpayload: authResult.userId\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_TWT_CHALLENGE,\n\t\t\tpayload: authResult.twtChallenge\n\t\t})\n\t\tdispatch({\n\t\t\ttype: SET_LOGIN,\n\t\t\tpayload: true,\n\t\t})\n\t}\n\n\t// Render spinner while waiting for API\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<div className='Center'>\n\t\t\t\t<Spinner color='primary' />\n\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// If logged in, redirect to /folders, else, render auth forms\n\tif (loggedIn) {\n\t\treturn <Redirect to='/folders'></Redirect>\n\t} else {\n\t\treturn (\n\t\t\t<Container fluid className='mt-5 '>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md='8' className='offset-md-2 p-3 '>\n\t\t\t\t\t\t<Form className='formcard auth-form' onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<FormGroup\n\t\t\t\t\t\t\t\tclassName='mt-4'>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='input'\n\t\t\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\t\t\tname='email'\n\t\t\t\t\t\t\t\t\tid='email'\n\t\t\t\t\t\t\t\t\tplaceholder='Email'\n\t\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\tid='password'\n\t\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{signIn ? (\n\t\t\t\t\t\t\t\t<FormGroup check className='mt-2'>\n\t\t\t\t\t\t\t\t\t<Label check>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\tclassName='checkmark'\n\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetStaySignedIn(!staySignedIn)\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tchecked={staySignedIn}\n\t\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tclassName='text-right'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#f9f9f9',\n\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: '400',\n\t\t\t\t\t\t\t\t\t\t\t\tletterSpacing: '1px',\n\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\tStay signed in\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t<FormGroup key='password-confirm'>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\t\t\t\tname='password-confirm'\n\t\t\t\t\t\t\t\t\t\t\tid='password-confirm'\n\t\t\t\t\t\t\t\t\t\t\tvalue={passwordConfirm}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setPasswordConfirm(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Confirm password'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormGroup>,\n\t\t\t\t\t\t\t\t\t<FormGroup key='twtId'>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tclassName='input mt-2'\n\t\t\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\t\t\tname='twtId'\n\t\t\t\t\t\t\t\t\t\t\tid='twtId'\n\t\t\t\t\t\t\t\t\t\t\tvalue={twtId}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setTwtId(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Twitter Username'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</FormGroup>,\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\tclassName='text-uppercase button mt-5'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t{signIn ? 'Sign in' : 'Register'}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md='8' className='offset-md-8'>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={toggleAuth}\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='text-uppercase button-static'\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tpadding: '15px',\n\t\t\t\t\t\t\t\tfontSize: '18px',\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{signIn ? 'Register' : 'Sign in'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default Auth","import {\n\tTWTAUTH_PREFIX,\n\tTWTAUTH_STATE,\n\tTWTAUTH_CHALLENGE,\n    TWTAUTH_SUFFIX\n} from './constants'\n\nconst getTwtUrl = (user, challenge, state) => {\n    return (\n\t\t\tTWTAUTH_PREFIX +\n\t\t\tuser +\n\t\t\tTWTAUTH_CHALLENGE +\n\t\t\tchallenge +\n\t\t\tTWTAUTH_STATE +\n\t\t\tstate +\n\t\t\tTWTAUTH_SUFFIX\n\t\t)\n}\n\nexport default getTwtUrl","import React, { useState, useContext, useEffect } from 'react'\n\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport getTwtUrl from '../newtwturl'\n\nconst Home = (props) => {\n\n\tconst location = props.location\n\tconsole.log(`in home, location.search: ${location.search}`)\n\tif (location.search === '?close') {\n\t\tconsole.log('closing window')\n\t\twindow.close()\n\t}\n\n    const { state, dispatch } = useContext(AppContext)\n    const { loggedIn, userId, twtChallenge, twtState } = state\n\n\tconst [showTwtAuth, setShowTwtAuth] = useState(false)\n\tconst [twtAuthUrl, setTwtAuthUrl] = useState(\"\")\n\n\tconst twtPopup = () => {\n\t\twindow.open(twtAuthUrl)\n\t}\n\n\tuseEffect(() => {\n\t\tif (loggedIn && userId) {\n\t\t\tsetTwtAuthUrl(getTwtUrl(userId, twtChallenge, twtState))\n\t\t\tsetShowTwtAuth(true)\n\t\t} else {\n\t\t\tsetTwtAuthUrl(\"\")\n\t\t\tsetShowTwtAuth(false)\n\t\t}\n\t},[loggedIn])\n\n    return (\n\t\t\t<div className='center-home'>\n\t\t\t\t<Card className='homecard card-fab'>\n\t\t\t\t\t<CardTitle>Welcome to Better Bookmarks</CardTitle>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>Organize your favorite Tweets into folders</li>\n\t\t\t\t\t\t\t\t<li>Share folders with anyone</li>\n\t\t\t\t\t\t\t\t<li>No more \"This Tweet has been deleted\"</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t{showTwtAuth ? <span className='link' onClick={twtPopup}>Login with Twitter</span> : null}\n\t\t\t\t\t</CardBody>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t)\n}\n\nexport default Home","import { BB_URL as URL } from \"../constants\"\n\n// 403 is old token\n\nexport const getFolders = async (token) => {\n\tconst getFoldersURL = URL + '/user/folders'\n\ttry {\n\t\tconst response = await fetch(getFoldersURL, {\n\t\t\tmethod: 'GET',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n                'Authorization': `JWT ${token}`\n\t\t\t},\n\t\t})\n        const status = response.status\n        const data = await response.json()\n        if (status === 200) {\n            return {\n                error: null,\n                folders: data.folders,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n\t} catch (error) {\n\t\tconsole.error(error)\n        return null\n\t}\n}\n\nexport const getOneFolder = async (folderId, token) => {\n    const getFoldersURL = URL + '/user/folders/' + folderId\n\ttry {\n\t\tconst response = await fetch(getFoldersURL, {\n\t\t\tmethod: 'GET',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n                'Authorization': `JWT ${token}`\n\t\t\t},\n\t\t})\n        const status = response.status\n        const data = await response.json()\n        if (status === 200) {\n            return {\n                error: null,\n                tweets: data.tweets,\n            }\n        } else {\n            return {\n                error: data.message\n            }\n        }\n\t} catch (error) {\n\t\tconsole.error(error)\n        return {error: error}\n\t}\n}\n\nexport const newFolder = async (folderName, token) => {\n    const newFolderURL = URL + '/user/folders'\n    const reqData = JSON.stringify({\n                    folderName: `${folderName}`\n                })\n    try {\n\t\t\tconst response = await fetch(newFolderURL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tcache: 'no-cache',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `JWT ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: reqData,\n\t\t\t})\n\t\t\tconst status = response.status\n\t\t\tconst data = await response.json()\n\t\t\tif (status === 201) {\n\t\t\t\treturn {\n\t\t\t\t\terror: null,\n\t\t\t\t\tmessage: `Created folder ${data.folder}!`,\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\terror: data.message,\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\treturn { error: error }\n\t\t}\n}\n\nexport const deleteFolder = async (folderId, token) => {\n\tconst deleteFolderURL = URL + '/user/folders/' + folderId\n\ttry {\n\t\tconst response = await fetch(deleteFolderURL, {\n\t\t\tmethod: 'DELETE',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `JWT ${token}`\n\t\t\t}\n\t\t})\n\t\tconst status = response.status\n\t\tconst data = await response.json()\n\t\tif (status === 200) {\n\t\t\treturn {\n\t\t\t\terror: null,\n\t\t\t\tmessage: `Deleted folder ${data.folder.folderName}!`,\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\terror: data.message,\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\treturn { error: error }\n\t}\n}\n\nexport const changeFolderName = async (folderId, newName, token) => {\n\tconsole.log(`changing folder ${folderId} to ${newName}`)\n\tconst changeNameURL = URL + '/user/folders/' + folderId\n\tconst reqData = JSON.stringify({\n\t\tnewName: `${newName}`,\n\t})\n\ttry {\n\t\tconst response = await fetch(changeNameURL, {\n\t\t\tmethod: 'POST',\n\t\t\tcache: 'no-cache',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `JWT ${token}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: reqData,\n\t\t})\n\t\tconst status = response.status\n\t\tconst data = await response.json()\n\t\tconsole.log(data.message)\n\t\tif (status === 201) {\n\t\t\treturn {\n\t\t\t\terror: null,\n\t\t\t\tmessage: data.message\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\terror: data.message,\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\treturn { error: error }\n\t}\n}","import React, { useContext, useEffect, useState } from 'react'\n//import { Row, Col, Container, Form, FormGroup } from 'reactstrap'\n\nimport { Stack, Form, Row, Col, Container, Modal, ModalBody, ModalTitle, ModalFooter, Button, CloseButton } from 'react-bootstrap'\n\nimport { MdDelete, MdEdit } from 'react-icons/md'\n\nimport { useHistory  } from 'react-router-dom'\n\nimport { SET_SINGLE_FOLDER, SET_SINGLE_FOLDER_NAME } from '../context/action.types'\n\nimport { AppContext } from '../context/Context'\n\nimport { changeFolderName, deleteFolder, newFolder as createFolder } from '../api/folders'\n\nimport { toast } from 'react-toastify'\nimport ModalHeader from 'react-bootstrap/esm/ModalHeader'\n\nconst Folder = (props) => {\n\tconst { folder, newFolder, refresh, selectFolder, selected } = props\n    const { state, dispatch } = useContext(AppContext)\n\tconst { token } = state\n\tconst [editable, setEditable] = useState(false)\n\tconst [folderName, setFolderName] = useState(newFolder ? \"\" : folder.folderName)\n\tconst [callingAPI, setCallingAPI] = useState(false)\n\tconst [creatingFolder, setCreatingFolder] = useState(false)\n\tconst [editingFolder, setEditingFolder] = useState(false)\n\tconst [showDelete, setShowDelete] = useState(false)\n\tconst [deletingFolder, setDeletingFolder] = useState(false)\n\n    const updateFolder = () => {\n        // Modal?\n        return\n    }\n\n    const startDeleteFolder = () => {\n\t\tif (showDelete) {\n\t\t\treturn\n\t\t}\n        setShowDelete(true)\n        return\n    }\n\n\tconst editName = () => {\n\t\tif (editable) {\n\t\t\treturn\n\t\t}\n\t\tsetEditable(true)\n\t}\n\n\tconst cancelEdit = () => {\n\t\tif (!editable) {\n\t\t\treturn\n\t\t}\n\t\tsetEditable(false)\n\t\tsetFolderName(newFolder ? \"\" : folder.folderName)\n\t}\n\n\tconst handleNewFolder = async (event) => {\n\t\tevent.preventDefault()\n\t\tsetEditable(false)\n\t\tif (newFolder) {\n\t\t\tsetCreatingFolder(true)\n\t\t} else {\n\t\t\tsetEditingFolder(true)\n\t\t}\n\t\tsetCallingAPI(true)\n\t}\n\n\tconst handleClose = () => {\n\t\tif (!showDelete) {\n\t\t\treturn\n\t\t}\n\t\tsetShowDelete(false)\n\t\treturn\n\t}\n\n\tconst handleDelete = () => {\n\t\tsetDeletingFolder(true)\n\t\tsetShowDelete(false)\n\t\tsetCallingAPI(true)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!callingAPI) {\n\t\t\treturn\n\t\t}\n\t\t(async () => {\n\t\t\tlet result;\n\t\t\tswitch (true) {\n\t\t\t\tcase creatingFolder:\n\t\t\t\t\tconsole.log(`attempting to create folder: ${folderName}`)\n\t\t\t\t\tsetCreatingFolder(false)\n\t\t\t\t\tsetCallingAPI(false)\n\t\t\t\t\tsetFolderName(\"\")\n\t\t\t\t\tresult = await createFolder(folderName, token)\n\t\t\t\t\tbreak\n\t\t\t\tcase deletingFolder:\n\t\t\t\t\tsetDeletingFolder(false)\n\t\t\t\t\tsetCallingAPI(false)\n\t\t\t\t\tresult = await deleteFolder(folder.folderId, token)\n\t\t\t\t\tbreak\n\t\t\t\tcase editingFolder:\n\t\t\t\t\tsetEditingFolder(false)\n\t\t\t\t\tsetCallingAPI(false)\n\t\t\t\t\tresult = await changeFolderName(folder.folderId, folderName, token)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (result.error) {\n\t\t\t\ttoast(result.error, { type: 'error' })\n\t\t\t} else {\n\t\t\t\ttoast(result.message, { type: 'success' })\n\t\t\t}\n\t\t\trefresh()\n\t\t})()\n\t})\n\n    const viewFolder = (folderId) => {\n        selectFolder(folderId)\n    }\n\n\tconst nameForm = (\n\t\t<Form onSubmit={handleNewFolder}>\n\t\t\t<input\n\t\t\t\tclassName='folder-input'\n\t\t\t\ttype='text'\n\t\t\t\tname='folderName'\n\t\t\t\tid='folderName'\n\t\t\t\tplaceholder={`${folder.folderName}`}\n\t\t\t\tvalue={folderName}\n\t\t\t\tonChange={(e) => setFolderName(e.target.value)}\n\t\t\t\tonBlur={() => {cancelEdit()}}\n\t\t\t\tautoFocus\n\t\t\t/>\n\t\t</Form>\n\t)\n\n\tconst deleteModal = (\n\t\t<Modal\n\t\t\tshow={showDelete}\n\t\t\tbackdrop='static'\n\t\t\tkeyboard={false}\n\t\t\t>\n\t\t\t\t<ModalHeader>\n\t\t\t\t\t<ModalTitle>Are you sure you want to delete {folder.folderName}?</ModalTitle>\n\t\t\t\t\t<CloseButton></CloseButton>\n\t\t\t\t</ModalHeader>\n\t\t\t\t<ModalBody>\n\t\t\t\t\tThis action cannot be undone.\n\t\t\t\t</ModalBody>\n\t\t\t\t<ModalFooter>\n\t\t\t\t\t<Button variant='secondary' onClick={handleClose}>Cancel</Button>\n\t\t\t\t\t<Button variant='primary' onClick={handleDelete}>Delete</Button>\n\t\t\t\t</ModalFooter>\n\t\t\t</Modal>\n\t)\n\n    return (\n\t\t\t<>\n\t\t\t\t<Row\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\ttextOverflow: 'ellipsis',\n\t\t\t\t\t\twhiteSpace: 'nowrap',\n\t\t\t\t\t}}>\n\t\t\t\t\t<Col\n\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\tnewFolder ? () => editName() : () => viewFolder(folder.folderId)\n\t\t\t\t\t\t}\n\t\t\t\t\t\txs={'8'}\n\t\t\t\t\t\tclassName='text-large cardtxt'\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tfontWeight: '300',\n\t\t\t\t\t\t\tfontSize: '16px',\n\t\t\t\t\t\t\tletterSpacing: '1px',\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<span className={'link ' + (selected ? 'selected-text' : '')}>\n\t\t\t\t\t\t\t{editable\n\t\t\t\t\t\t\t\t? nameForm\n\t\t\t\t\t\t\t\t: folder.folderName.length <= (selected ? 15 : 17)\n\t\t\t\t\t\t\t\t? folder.folderName\n\t\t\t\t\t\t\t\t: folder.folderName.substring(0, selected ? 13 : 15) + '...'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col xs={'4'} hidden={newFolder} className='float-end'>\n\t\t\t\t\t\t<MdDelete\n\t\t\t\t\t\t\tonClick={() => startDeleteFolder()}\n\t\t\t\t\t\t\tcolor='#FF6370'\n\t\t\t\t\t\t\tclassName=' icon'\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tzIndex: '1',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<MdEdit\n\t\t\t\t\t\t\tclassName='icon '\n\t\t\t\t\t\t\tcolor='#54eafe'\n\t\t\t\t\t\t\tonClick={() => editName()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t{deleteModal}\n\t\t\t</>\n\t\t)\n}\n\nexport default Folder","import React, { useContext, useEffect, useState, useRef } from 'react'\nimport { Row, Col, Spinner } from 'reactstrap'\n\nimport { MdDelete, MdEdit } from 'react-icons/md'\n\nimport { TwitterTweetEmbed } from 'react-twitter-embed'\n\nimport { Tweet as EmbTweet } from 'react-twitter-widgets'\n\nimport { useHistory } from 'react-router-dom'\n\nimport { AppContext } from '../context/Context'\nimport { useInViewport } from 'react-in-viewport'\n\nconst Tweet = (props) => {\n\tconst { state, dispatch } = useContext(AppContext)\n\tconst history = useHistory()\n\n\tconst { tweet } = props\n\n\tconst [enteredView, setEnteredView] = useState(false)\n\tconst [isLoading, setIsLoading] = useState(false)\n\tconst [isLoaded, setisLoaded] = useState(false)\n\n\tconst tweetRef = useRef()\n\tconst config = { disconnectOnLeave: false}\n\tconst { inViewport, enterCount } = useInViewport(\n\t\ttweetRef,\n\t\tconfig,\n\t\tprops\n\t)\n\n\tuseEffect(() => {\n\t\tif (enteredView || enterCount > 1 || !inViewport) {\n\t\t\treturn\n\t\t}\n\t\tif (inViewport) {\n\t\t\tsetEnteredView(true)\n\t\t\treturn\n\t\t}\n\t}, [inViewport])\n\n\tuseEffect(() => {\n\t\tif (!enteredView) {\n\t\t\treturn\n\t\t}\n\t\tif (enteredView) {\n\t\t\tsetIsLoading(true)\n\t\t\treturn\n\t\t}\n\t},[enteredView])\n\n\n\n\tconst loaded = () => {\n\t\tsetIsLoading(false)\n\t}\n\n\t// useEffect(() => {\n\t// \tif (isLoaded) {\n\t// \t\treturn\n\t// \t}\n\t// \tsetIsLoaded(true)\n\t// \tsetShowTweet(true)\n\t// }, [isLoaded])\n\n\tconst deleteTweet = () => {\n\t\t// Modal?\n\t\treturn\n\t}\n\n\treturn (\n\t\t<div ref={tweetRef}>\n\t\t\t<Row>\n\t\t\t\t<Col\n\t\t\t\t\tmd='10'\n\t\t\t\t\tclassName='d-flex justify-content-center align-items-center text-large cardtxt'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t}}>\n\t\t\t\t\t{enteredView ? (\n\t\t\t\t\t\t<><div className='tweet'>\n\t\t\t\t\t\t\t<EmbTweet onLoad={() => {\n\t\t\t\t\t\t\t\tloaded()\n\t\t\t\t\t\t\t\t}} tweetId={tweet.twtId} />\n\t\t\t\t\t\t</div><div hidden={!isLoading} className='tweet'>\n\t\t\t\t\t\t\t\t<Spinner color='primary' />\n\t\t\t\t\t\t\t</div></>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className='tweet'>{tweet.twtText}</div>\n\t\t\t\t\t)}\n\t\t\t\t</Col>\n\t\t\t\t<Col\n\t\t\t\t\tmd='2'\n\t\t\t\t\tclassName='d-flex justify-content-center align-items-center'>\n\t\t\t\t\t<div className='iconbtn'>\n\t\t\t\t\t\t<MdDelete\n\t\t\t\t\t\t\tonClick={() => deleteTweet()}\n\t\t\t\t\t\t\tcolor='#FF6370'\n\t\t\t\t\t\t\tclassName=' icon'\n\t\t\t\t\t\t\tstyle={{ zIndex: '1' }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</div>\n\t)\n}\n\nexport default Tweet\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport { useHistory } from 'react-router-dom'\n\nimport { IoIosArrowBack } from 'react-icons/io'\n\nimport {\n\tContainer,\n\tListGroup,\n\tListGroupItem,\n\tSpinner,\n\tButton,\n    Row,\n    Col\n} from 'reactstrap'\n\nimport { SET_SINGLE_FOLDER, SET_SINGLE_FOLDER_NAME } from '../context/action.types'\n\nimport { AppContext } from '../context/Context'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { getOneFolder } from '../api/folders'\n\nimport Tweet from '../components/Tweet'\n\nconst OneFolder = ({folder}) => {\n    const { state, dispatch } = useContext(AppContext)\n    //const history = useHistory()\n    const { loggedIn, token } = state\n\n\tconst [ prevFolder, setPrevFolder ] = useState({})\n    const [ isLoading, setIsLoading ] = useState(true)\n    const [ getTweets, setGetTweets ] = useState(true)\n    const [ tweetsArr, setTweetsArr ] = useState([])\n\n    const [ embed, setEmbed ] = useState(true)\n\n\tconst [tweetRows, setTweetRows] = useState([])\n\n    useEffect(() => {\n\t\tif (!folder || folder.folderId === null) {\n\t\t\treturn\n\t\t}\n\t\tconsole.log(`folder updated... getting ${folder.folderName}`)\n        if (loggedIn) {\n            (async () => {\n\t\t\t\tconsole.log(`getting folder:`)\n\t\t\t\tconsole.log(folder)\n                const tweets = await getOneFolder(folder.folderId, token)\n                if (tweets.error) {\n                    toast(`Error: ${tweets.error}`)\n                    setGetTweets(false)\n                    setIsLoading(false)\n                    return\n                }\n                if (tweets.tweets) {\n                    setTweetsArr(tweets.tweets)\n                    setGetTweets(false)\n\t\t\t\t\tsetIsLoading(false)\n\t\t\t\t\tsetPrevFolder(folder)\n                }\n            })()\n        }\n    }, [folder])\n\n\tuseEffect(() => {\n\t\tif (tweetsArr.length === 0) {\n\t\t\tsetTweetRows([])\n\t\t\treturn\n\t\t}\n\t\tconst [colA, colB] = [[], []]\n\t\ttweetsArr.forEach((tweet, i) => {\n\t\t\ti % 2 === 0\n\t\t\t\t? colA.push(\n\t\t\t\t\t\t<ListGroupItem key={tweet.twtId} className='tweetcard mb-4'>\n\t\t\t\t\t\t\t<Tweet tweet={tweet} embed={true} tweetKey={tweet.twtId}></Tweet>\n\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t  )\n\t\t\t\t: colB.push(\n\t\t\t\t\t\t<ListGroupItem key={tweet.twtId} className='tweetcard mb-4'>\n\t\t\t\t\t\t\t<Tweet tweet={tweet} embed={true} tweetKey={tweet.twtId}></Tweet>\n\t\t\t\t\t\t</ListGroupItem>\n\t\t\t\t  )\n\t\t})\n\t\tconst rows = []\n\t\tfor (let i = 0; i < colA.length; i++) {\n\t\t\trows.push(\n\t\t\t\t<Row key={i}>\n\t\t\t\t\t<Col>{colA[i]}</Col>\n\t\t\t\t\t<Col>{colB[i] ? colB[i] : null}</Col>\n\t\t\t\t</Row>\n\t\t\t)\n\t\t}\n\t\tsetTweetRows(rows)\n\t}, [tweetsArr])\n\n\tconst toggleEmbed = () => {\n\t\tsetEmbed(!embed)\n\t}\n\n    if (!loggedIn) {\n        return (\n            <Redirect to='/auth'></Redirect>\n        )\n    } else if (isLoading) {\n        return (\n\t\t\t<div className='Center'>\n\t\t\t\t<Spinner color='primary' />\n\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t</div>\n\t\t)\n    } else {\n        return (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<Container className='folder-title'>\n\t\t\t\t\t\t\t<Row className='justify-content-md-center'>\n\t\t\t\t\t\t\t\t<Col md='auto'>\n\t\t\t\t\t\t\t\t\t<div className='folderName'>{folder.folderName}</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Container scrollable={`true`} className='mt-4 mb-5 tweet-list'>\n\t\t\t\t\t\t\t{tweetsArr.length === 0 && !isLoading ? (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName='Center text-large cardtxt'\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tNo Tweets (yet)!\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t<Container>{tweetRows}</Container>\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</>\n\t\t\t\t)\n        }\n}\n\nexport default OneFolder","import React, { useContext, useEffect, useState } from 'react'\n\nimport {\n\tContainer,\n\tSpinner,\n    Row,\n    Col\n} from 'reactstrap'\n\nimport { AppContext } from '../context/Context'\n\nimport { toast } from 'react-toastify'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { getFolders } from '../api/folders'\n\nimport Folder from '../components/Folder'\n\nimport OneFolder from './OneFolder'\n\nconst Folders = () => {\n    const { state, dispatch } = useContext(AppContext)\n\n\tconst { loggedIn, token } = state\n\n    const [ isLoading, setIsLoading ] = useState(true)\n    const [ gotFolders, setGotFolders ] = useState(false)\n    const [ foldersArr, setFoldersArr ] = useState([])\n    const [ currentFolder, setCurrentFolder] = useState(null)\n    const [ prevFolder, setPrevFolder ] = useState(null)\n    const [ oneFolder, setOneFolder ] = useState({folderId: null})\n\n    const refreshFolders = () => {\n        setGotFolders(false)\n        setIsLoading(true)\n    }\n\n    const selectFolder = (folderId) => {\n        if (prevFolder.folderId === folderId) {\n            return\n        }\n        setCurrentFolder(foldersArr.find(folder => folder.folderId === folderId))\n    }\n\n    useEffect(() => {\n        if (!currentFolder) {\n            return\n        }\n        if (prevFolder) {\n            if (\n                    currentFolder.folderId === prevFolder.folderId &&\n                    currentFolder.tweets.length === prevFolder.tweets.length\n                ) {\n                    return\n                } else {\n                    setOneFolder(currentFolder)\n                    setPrevFolder(currentFolder)\n                }\n        } else {\n            setOneFolder(currentFolder)\n            setPrevFolder(currentFolder)\n        }\n    }, [currentFolder])\n\n    useEffect(() => {\n        if (gotFolders) {\n            return\n        }\n        if (loggedIn) {\n            (async () => {\n                const folders = await getFolders(token)\n                if (folders.error) {\n                    toast(`Error: ${folders.error}`)\n                    setGotFolders(true)\n                    setIsLoading(false)\n                    return\n                }\n                if (folders.folders) {\n                    setFoldersArr(folders.folders)\n                    setGotFolders(true)\n\t\t\t\t\tsetIsLoading(false)\n                }\n            })()\n        }\n    }, [gotFolders])\n\n    useEffect(() => {\n        if (foldersArr.length === 0) {\n            return\n        }\n        setCurrentFolder(\n\t\t\t\t\tprevFolder\n\t\t\t\t\t\t? foldersArr.find(\n\t\t\t\t\t\t\t\t(folder) => folder.folderId === prevFolder.folderId\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: foldersArr[0]\n\t\t\t\t)\n    }, [foldersArr])\n\n    if (!loggedIn) {\n        return (\n            <Redirect to='/auth' />\n        )\n    } else {\n        return (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div hidden={!isLoading} className='Center'>\n\t\t\t\t\t\t\t<Spinner color='primary' />\n\t\t\t\t\t\t\t<div className='text-primary'>Loading...</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div hidden={isLoading}>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col md={3}>\n\t\t\t\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\t\t\t\tscrollable={`true`}\n\t\t\t\t\t\t\t\t\t\tclassName='folder-list pt-4 container-fluid no-padding'>\n\t\t\t\t\t\t\t\t\t\t{foldersArr.length === 0 && !isLoading ? (\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='Center text-large cardtxt'\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: '700',\n\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: '32px',\n\t\t\t\t\t\t\t\t\t\t\t\t\tletterSpacing: '2px',\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\tNo folders found!\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='folder-listcard mb-4'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Folder\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfolder={{ folderName: 'New Folder' }}\n                                                        key={'newFolder'}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewFolder={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trefresh={refreshFolders}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t{foldersArr.map((folder) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'mb-4 ' +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(folder.folderId === oneFolder.folderId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? 'selected-folder'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: 'folder-listcard')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Folder\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfolder={folder}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={folder.folderId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewFolder={false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trefresh={refreshFolders}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectFolder={selectFolder}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected={folder.folderId === oneFolder.folderId}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col md={9}>\n\t\t\t\t\t\t\t\t\t<OneFolder folder={oneFolder}></OneFolder>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)\n    } \n}\n\nexport default Folders","import {\n\tSET_USER,\n\tSET_TOKEN,\n\tSET_LOGIN,\n\tSET_FOLDERS,\n\tRESET_SIGNIN,\n\tSET_SHOW_LOGOUT,\n\tSET_PREV_USER,\n\tSET_SINGLE_FOLDER,\n\tSET_SINGLE_FOLDER_NAME,\n\tSET_USER_ID,\n\tSET_TWT_CHALLENGE,\n} from './action.types'\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TWT_CHALLENGE:\n      return action.payload === null\n        ? { ...state, twtChallenge: null}\n        : { ...state, twtChallenge: action.payload}\n    case SET_USER_ID:\n      return action.payload === null\n        ? { ...state, userId: null}\n        : { ...state, userId: action.payload}\n    case SET_SINGLE_FOLDER_NAME:\n      return { ...state, folderName: action.payload}\n    case SET_SINGLE_FOLDER:\n      return { ...state, folder: action.payload}\n    case SET_PREV_USER:\n      return action.payload === null\n        ? { ...state, prevUser: null}\n        : { ...state, prevUser: action.payload}\n    case SET_SHOW_LOGOUT:\n      return { ...state, showLogout: action.payload }\n    case RESET_SIGNIN:\n      return { ...state, signIn: true}\n    case SET_FOLDERS:\n      return action.payload === null\n        ? { ...state, folders: []}\n        : { ...state, folders: action.payload}\n    case SET_LOGIN:\n      return action.payload === null\n        ? { ...state, loggedIn: false}\n        : { ...state, loggedIn: action.payload}\n    case SET_USER:\n      return action.payload === null\n        ? { ...state, user: null}\n        : { ...state, user: action.payload}\n    case SET_TOKEN:\n      return action.payload === null || action.payload === false\n        ? { ...state, token: null}\n        : { ...state, token: action.payload}\n    default:\n      return state\n  }\n}","import React, { useReducer } from \"react\";\n\nimport { Container } from \"reactstrap\";\n\nimport { randomBytes } from 'crypto'\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// components\nimport Header from \"./layout/Header\"\nimport Footer from \"./layout/Footer\"\nimport PageNotFound from \"./pages/PageNotFound\"\nimport Auth from \"./pages/Auth\"\nimport Home from \"./pages/Home\"\nimport Folders from \"./pages/Folders\"\nimport OneFolder from './pages/OneFolder'\n\nimport reducer from \"./context/reducer\";\nimport { AppContext } from \"./context/Context\";\n\nconst initialState = {\n  showLogout: false,\n  inAuth: false,\n  loggedIn: false,\n  twtAuth: {\n    authed: false,\n    twtId: null,\n    twtToken: null,\n    twtSecret: null\n  },\n  user: null,\n  userId: null,\n  twtChallenge: null,\n  twtState: randomBytes(48).toString('hex'),\n  prevUser: null,\n  token: null,\n  folders: [],\n  folder: {},\n  folerName: null,\n  folderToUpdate: null,\n  folderIdToUpdate: null\n};\n\nconst App = () => {\n  \n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n\t\t<Router basename='better-bookmarks'>\n\t\t\t<AppContext.Provider value={{ state, dispatch }}>\n\t\t\t\t<ToastContainer theme='dark' />\n\t\t\t\t<Header />\n\t\t\t\t<Container className='h-75'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/auth' component={Auth} />\n\t\t\t\t\t\t<Route exact path='/folders' component={Folders} />\n\t\t\t\t\t\t<Route exact path='/onefolder' component={OneFolder} />\n\t\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t\t<Route exact path='*' component={PageNotFound} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Container>\n\t\t\t\t{/* <Footer /> */}\n\t\t\t</AppContext.Provider>\n\t\t</Router>\n\t)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}